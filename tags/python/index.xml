<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Connor Shade</title>
    <link>https://connorshade.com/tags/python/</link>
    <description>Recent content in python on Connor Shade</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Jul 2023 16:46:09 -0400</lastBuildDate><atom:link href="https://connorshade.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Service to Shell</title>
      <link>https://connorshade.com/service-to-shell/</link>
      <pubDate>Fri, 28 Jul 2023 16:46:09 -0400</pubDate>
      
      <guid>https://connorshade.com/service-to-shell/</guid>
      <description>Check out the code at github.com/cnnrshd/service-to-shell.</description>
    </item>
    
    <item>
      <title>Making a Vulnerable Webapp</title>
      <link>https://connorshade.com/service-to-shell/vulnerable-webapp/</link>
      <pubDate>Thu, 27 Jul 2023 21:43:58 -0400</pubDate>
      
      <guid>https://connorshade.com/service-to-shell/vulnerable-webapp/</guid>
      <description>Welcome to Part One in a three part series that I&amp;rsquo;ve called &amp;ldquo;service-to-shell&amp;rdquo;. I want to make a vulnerable webapp that I can scan with a custom nmap probe and exploit with a custom Metasploit module.
This post covers making the vulnerable webapp - not as exciting as a custom Metasploit module or as useful as an additional nmap banner scanner, but an essential part of the process. For making a vulnerable webapp, the first step is to pick the language (I went with Python), then the vulnerability (Command injection - it&amp;rsquo;s simple to write and understand), and finally the theme.</description>
    </item>
    
  </channel>
</rss>
